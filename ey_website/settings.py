"""
Django settings for ey_website project.

Generated by 'django-admin startproject' using Django 5.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""
# settings.py (at the very top)
from dotenv import load_dotenv
# Load environment variables from .env file
load_dotenv()
import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-6qie*%tx8#%7sr7kch=mt+y=^fyd8ajekc04n@_mntmws5m-p5'



# Allow all hosts - USE WITH CAUTION IN PRODUCTION!
ALLOWED_HOSTS = ['*']

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.humanize',  # For human-readable formatting
    'core',
    'cloudinary',
    'cloudinary_storage',
    'newsletter',
    'widget_tweaks',
    'chatbot',
    'attendance',  # Attendance management app
    'rfp',  # <-- Add this back
    'fieldwork',

]

# Cloudinary Configuration: Fetch credentials from environment variables
CLOUDINARY_CLOUD_NAME = os.environ.get('CLOUDINARY_CLOUD_NAME')
CLOUDINARY_API_KEY = os.environ.get('CLOUDINARY_API_KEY')
CLOUDINARY_API_SECRET = os.environ.get('CLOUDINARY_API_SECRET')

# Cloudinary storage settings
CLOUDINARY_STORAGE = {
    'CLOUD_NAME': CLOUDINARY_CLOUD_NAME,
    'API_KEY': CLOUDINARY_API_KEY,
    'API_SECRET': CLOUDINARY_API_SECRET,
}
DEFAULT_FILE_STORAGE = 'cloudinary_storage.storage.MediaCloudinaryStorage'
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'core.middleware.TimezoneMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',

]

ROOT_URLCONF = 'ey_website.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'ey_website.wsgi.application'


# Database Configuration
# MySQL database configuration using pymysql
import pymysql
pymysql.install_as_MySQLdb()


# Define environment variables first
DB_NAME = os.environ.get('DB_NAME')
DB_USER = os.environ.get('DB_USER')
DB_PASSWORD = os.environ.get('DB_PASSWORD')
DB_HOST = os.environ.get('DB_HOST')
DB_PORT = int(os.environ.get('DB_PORT', 4000)) # Default to 4000 if not set

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        # Fetching database credentials
        'NAME': DB_NAME,
        'USER': DB_USER,
        'PASSWORD': DB_PASSWORD,
        'HOST': DB_HOST,
        'PORT': DB_PORT,
        # ADD THIS LINE for persistent connections to prevent connection loss (Error 2013)
        'CONN_MAX_AGE': 48000, # Keep connections open for up to 10 minutes (600 seconds)
        'OPTIONS': {
            'ssl': {
                'ca': os.path.join(BASE_DIR, 'cert', 'isrgrootx1.pem')
            }
        }
    }
}



# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIRS = [BASE_DIR / 'core/static']
STATIC_ROOT = BASE_DIR / 'staticfiles'

# Whitenoise configuration for static files
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Media files configuration
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Custom user model
AUTH_USER_MODEL = 'core.User'

# Security settings - adjust these based on your environment
DEBUG = True

# Logging configuration
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'WARNING',
    },
}
# settings.py
# Email Configuration - FIXED VERSION
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_USE_SSL = False

# Fetch sensitive credentials from environment variables
EMAIL_HOST_USER = os.environ.get('EMAIL_USER')
EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_PASS')

# Critical settings that were missing
DEFAULT_FROM_EMAIL = EMAIL_HOST_USER
SERVER_EMAIL = EMAIL_HOST_USER
EMAIL_TIMEOUT = 30  # Prevent hanging

# Development email handling
if DEBUG:
    # Optional: Print emails to console instead of sending
    # EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

    # OR keep real emails but add debugging
    import logging

    logger = logging.getLogger('django.mail')
    logger.setLevel(logging.DEBUG)
# Fetch Gemini API Key
GEMINI_API_KEY = os.environ.get('GEMINI_API_KEY')

# SET THESE TO PREVENT TIMEOUTS/CONNECTION RESETS ON LARGE FILE UPLOADS
# Django's default limit for request body size is often too small (2.5MB).
# Setting limits to 50MB should prevent errors during image uploads.

# Maximum size of a request body that Django will process (50 MB)
DATA_UPLOAD_MAX_MEMORY_SIZE = 52428800  # 50 * 1024 * 1024

# Maximum size of an uploaded file that will be handled entirely in memory (50 MB)
FILE_UPLOAD_MAX_MEMORY_SIZE = 52428800  # 50 * 1024 * 1024




# This MUST match the path in your URL patterns: 'client-portal/login/'
LOGIN_URL = '/client-portal/login/'



# settings.py

# ... (Existing settings) ...

# -------------------------------------------------------------
# ⚠️ FIX: Content Security Policy (CSP) for Google Maps Embeds ⚠️
# -------------------------------------------------------------

# Add 'googleusercontent.com' and 'maps.google.com' to frame-ancestors
# This tells the browser it's okay for content from these domains to be embedded.
# Note: You may need to install django-csp for this to work in production,
# but often Django's base security headers are enough for development.

# Ensure the maps domains are allowed for IFRAMES
CSRF_TRUSTED_ORIGINS = [
    # Include your development URL here
    'http://127.0.0.1:8000',
    # And potentially the google domains if you are getting CSRF errors
    'https://*.google.com',
]

# If you have SECUTIRY_MIDDLEWARE enabled, you may need to explicitly allow iframes:
# IMPORTANT: Use the exact domains your embed URL uses!
X_FRAME_OPTIONS = 'SAMEORIGIN'
# If you are using django-csp middleware, add this:
CSP_FRAME_SRC = (
    "'self'",
    'https://www.google.com',
    'https://googleusercontent.com',
    'http://googleusercontent.com', # Use 'http' if your current URL starts with it
    'https://maps.google.com',
    'http://maps.google.com',
)




# Increase request timeout for large file processing
REQUEST_TIMEOUT = 300  # 5 minutes

# Add TinyMCE domains to CSP if you're using Content Security Policy
CSP_SCRIPT_SRC = [
    "'self'",
    "https://cdn.tiny.cloud",  # Add TinyMCE CDN
]

CSP_STYLE_SRC = [
    "'self'",
    "https://cdn.tiny.cloud",  # Add TinyMCE CDN
    "'unsafe-inline'",  # TinyMCE needs inline styles
]

CSP_IMG_SRC = [
    "'self'",
    "data:",  # Allow data URLs for images
    "https:",  # Allow HTTPS images
    "http:",   # Allow HTTP images (for development)
]

# Add Cloudinary to trusted origins
CSRF_TRUSTED_ORIGINS = [
    'http://127.0.0.1:8000',
    'http://localhost:8000',
    'https://*.cloudinary.com',
    'https://res.cloudinary.com',
]

# Session settings for better editor experience
SESSION_COOKIE_AGE = 3600  # 1 hour session
SESSION_SAVE_EVERY_REQUEST = True

